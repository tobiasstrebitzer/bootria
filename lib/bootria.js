// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  jQuery(function() {
    var AlertView, DivView, DropdownDividerView, DropdownItemView, DropdownView, HeroView, Item, List, ListView, NavbarBrandView, NavbarDividerView, NavbarItemView, NavbarView, PackageView, RootView;
    Item = (function(_super) {

      __extends(Item, _super);

      function Item() {
        return Item.__super__.constructor.apply(this, arguments);
      }

      Item.prototype.defaults = {
        title: 'Success',
        message: 'You successfully added a message box'
      };

      return Item;

    })(Backbone.Model);
    List = (function(_super) {

      __extends(List, _super);

      function List() {
        return List.__super__.constructor.apply(this, arguments);
      }

      List.prototype.model = Item;

      return List;

    })(Backbone.Collection);
    ListView = (function(_super) {

      __extends(ListView, _super);

      function ListView() {
        return ListView.__super__.constructor.apply(this, arguments);
      }

      ListView.prototype.el = $('body');

      ListView.prototype.initialize = function() {
        _.bindAll(this);
        this.collection = new List;
        this.collection.bind('add', this.appendItem);
        this.counter = 0;
        return this.render();
      };

      ListView.prototype.render = function() {
        var $container;
        $container = $("<div class='container'></div>");
        $container.append("<div class='well'><button class='btn'>AddMessage</button></div>");
        return $(this.el).append($container);
      };

      ListView.prototype.addItem = function() {
        var item;
        this.counter++;
        item = new Item;
        item.set({
          part2: "" + (item.get('part2')) + " " + this.counter
        });
        return this.collection.add(item);
      };

      ListView.prototype.appendItem = function(item) {
        return $('div.container').append("<div class='alert alert-success'><h4>" + (item.get('title')) + "</h4><p>" + (item.get('message')) + "</p></div>");
      };

      ListView.prototype.events = {
        'click button': 'addItem'
      };

      return ListView;

    })(Backbone.View);
    PackageView = (function(_super) {

      __extends(PackageView, _super);

      function PackageView() {
        return PackageView.__super__.constructor.apply(this, arguments);
      }

      PackageView.prototype.id = null;

      PackageView.prototype.el = $('body');

      PackageView.prototype.template = false;

      PackageView.prototype.options = {};

      PackageView.prototype.parentView = null;

      PackageView.prototype.html = null;

      PackageView.prototype.initialize = function(options) {
        _.bindAll(this);
        this.parentView = options.parentView;
        this.el = options.el;
        return this.render();
      };

      PackageView.prototype.render = function() {
        var html;
        if (this.template) {
          html = $(_.template(this.template, this.options));
          $(this.el).append(html);
          return this.el = html;
        }
      };

      PackageView.prototype.end = function() {
        return this.parentView;
      };

      PackageView.prototype.html = function(html) {
        $(this.el).append(html);
        return this;
      };

      PackageView.prototype.hr = function() {
        this.html("<hr />");
        return this;
      };

      PackageView.prototype.heading = function(title, level) {
        if (level == null) {
          level = 1;
        }
        this.html("<h" + level + ">" + title + "</h" + level + ">");
        return this;
      };

      PackageView.prototype.addClass = function(name) {
        $(this.el).addClass(name);
        return this;
      };

      PackageView.prototype.div = function(className) {
        var options, result;
        options = {
          parentView: this,
          el: this.el
        };
        result = new DivView(options);
        if (className) {
          result.addClass(className);
        }
        return result;
      };

      PackageView.prototype.text = function(text, options) {
        var _ref, _ref1;
        if (options == null) {
          options = {};
        }
        if ((_ref = options.wrap) == null) {
          options.wrap = true;
        }
        if ((_ref1 = options["class"]) == null) {
          options["class"] = "";
        }
        if (options["class"]) {
          options["class"] = " class='" + options["class"] + "'";
        }
        if (options.wrap === true) {
          options.wrap = "p";
        }
        console.log(options);
        if (options.wrap) {
          this.html("<" + options.wrap + options["class"] + ">" + text + "</" + options.wrap + ">");
        } else {
          this.html("" + text);
        }
        return this;
      };

      PackageView.prototype.container = function() {
        return this.div("container");
      };

      PackageView.prototype.row = function() {
        return this.div("row");
      };

      PackageView.prototype.span = function(span) {
        return this.div("span" + span);
      };

      return PackageView;

    })(Backbone.View);
    RootView = (function(_super) {

      __extends(RootView, _super);

      function RootView() {
        return RootView.__super__.constructor.apply(this, arguments);
      }

      RootView.prototype.initialize = function() {
        return _.bindAll(this);
      };

      return RootView;

    })(PackageView);
    DivView = (function(_super) {

      __extends(DivView, _super);

      function DivView() {
        return DivView.__super__.constructor.apply(this, arguments);
      }

      DivView.prototype.options = {};

      DivView.prototype.template = '<div></div>';

      return DivView;

    })(PackageView);
    $.fn.extend({
      bootria: function(options) {
        var settings;
        settings = {
          id: null,
          virtual: false
        };
        settings = $.extend(settings, options);
        settings.el = this[0];
        return new RootView(settings);
      }
    });
    NavbarView = (function(_super) {

      __extends(NavbarView, _super);

      function NavbarView() {
        return NavbarView.__super__.constructor.apply(this, arguments);
      }

      NavbarView.prototype.options = {
        style: ''
      };

      NavbarView.prototype.template = '<div class="navbar <%= style %>">' + '<div class="navbar-inner">' + '<ul class="nav"></ul>' + '</div>' + '</div>';

      NavbarView.prototype.brand = function(options) {
        if (options == null) {
          options = {};
        }
        options.parentView = this;
        options.el = $(this.el).find("ul.nav");
        new NavbarBrandView(options);
        return this;
      };

      NavbarView.prototype.item = function(options) {
        if (options == null) {
          options = {};
        }
        options.parentView = this;
        options.el = $(this.el).find("ul.nav");
        new NavbarItemView(options);
        return this;
      };

      NavbarView.prototype.divider = function() {
        var options;
        options = {
          parentView: this,
          el: this.el.find("ul.nav")
        };
        new NavbarDividerView(options);
        return this;
      };

      return NavbarView;

    })(PackageView);
    NavbarBrandView = (function(_super) {

      __extends(NavbarBrandView, _super);

      function NavbarBrandView() {
        return NavbarBrandView.__super__.constructor.apply(this, arguments);
      }

      NavbarBrandView.prototype.options = {
        title: 'Home',
        href: "#"
      };

      NavbarBrandView.prototype.template = '<a class="brand" href="<%= href %>"><%= title %></a>';

      return NavbarBrandView;

    })(PackageView);
    NavbarItemView = (function(_super) {

      __extends(NavbarItemView, _super);

      function NavbarItemView() {
        return NavbarItemView.__super__.constructor.apply(this, arguments);
      }

      NavbarItemView.prototype.options = {
        title: 'Menu entry',
        href: "#",
        active: false
      };

      NavbarItemView.prototype.template = '<li<% if(active) { %> class="active"<% } %>>' + '<a href="<%= href %>"><%= title %></a>' + '</li>';

      return NavbarItemView;

    })(PackageView);
    NavbarDividerView = (function(_super) {

      __extends(NavbarDividerView, _super);

      function NavbarDividerView() {
        return NavbarDividerView.__super__.constructor.apply(this, arguments);
      }

      NavbarDividerView.prototype.options = {};

      NavbarDividerView.prototype.template = '<li class="divider-vertical"></li>';

      return NavbarDividerView;

    })(PackageView);
    PackageView.prototype.navbar = function(options) {
      if (options == null) {
        options = {};
      }
      options.parentView = this;
      options.el = this.el;
      return new NavbarView(options);
    };
    AlertView = (function(_super) {

      __extends(AlertView, _super);

      function AlertView() {
        return AlertView.__super__.constructor.apply(this, arguments);
      }

      AlertView.prototype.options = {
        title: 'Title',
        message: 'Alert message',
        style: '',
        close: true,
        heading: false
      };

      AlertView.prototype.template = '<div class="alert<% if(style) { %> alert-<%= style %><% } %>">' + '<% if(close) { %><button type="button" class="close" data-dismiss="alert">&times;</button><% } %>' + '<% if(heading) { %>' + '<h4><%= title %></h4><p><%= message %></p>' + '<% }else{ %>' + '<p><strong><%= title %>:</strong>&nbsp;<%= message %></p>' + '<% } %>' + '</div>';

      return AlertView;

    })(PackageView);
    PackageView.prototype.alert = function(options) {
      var result;
      options.parentView = this;
      options.el = this.el;
      result = new AlertView(options);
      return this;
    };
    DropdownView = (function(_super) {

      __extends(DropdownView, _super);

      function DropdownView() {
        return DropdownView.__super__.constructor.apply(this, arguments);
      }

      DropdownView.prototype.options = {
        role: 'menu',
        labelledby: 'dropdownMenu'
      };

      DropdownView.prototype.template = '<ul style="display: block; position: static;" class="dropdown-menu" role="<%= role %>" aria-labelledby="<%= labelledby %>"></ul>';

      DropdownView.prototype.item = function(options) {
        options.parentView = this;
        options.el = this.el;
        new DropdownItemView(options);
        return this;
      };

      DropdownView.prototype.divider = function() {
        var options;
        options = {
          parentView: this,
          el: this.el
        };
        new DropdownDividerView(options);
        return this;
      };

      return DropdownView;

    })(PackageView);
    DropdownItemView = (function(_super) {

      __extends(DropdownItemView, _super);

      function DropdownItemView() {
        return DropdownItemView.__super__.constructor.apply(this, arguments);
      }

      DropdownItemView.prototype.options = {
        title: 'Menu entry',
        href: "#",
        tabindex: -1
      };

      DropdownItemView.prototype.template = '<li><a tabindex="<%= tabindex %>" href="<%= href %>"><%= title %></a></li>';

      return DropdownItemView;

    })(PackageView);
    DropdownDividerView = (function(_super) {

      __extends(DropdownDividerView, _super);

      function DropdownDividerView() {
        return DropdownDividerView.__super__.constructor.apply(this, arguments);
      }

      DropdownDividerView.prototype.options = {};

      DropdownDividerView.prototype.template = '<li class="divider"></li>';

      return DropdownDividerView;

    })(PackageView);
    PackageView.prototype.dropdown = function(options) {
      if (options == null) {
        options = {};
      }
      options.parentView = this;
      options.el = this.el;
      return new DropdownView(options);
    };
    HeroView = (function(_super) {

      __extends(HeroView, _super);

      function HeroView() {
        return HeroView.__super__.constructor.apply(this, arguments);
      }

      HeroView.prototype.options = {};

      HeroView.prototype.template = '<div class="hero-unit"></div>';

      return HeroView;

    })(PackageView);
    return PackageView.prototype.hero = function(options) {
      if (options == null) {
        options = {};
      }
      options.parentView = this;
      options.el = this.el;
      return new HeroView(options);
    };
  });

}).call(this);
