// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  jQuery(function() {
    var AlertView, ContainerView, DivView, Item, List, ListView, PackageView, RootView, RowView, SpanView;
    Item = (function(_super) {

      __extends(Item, _super);

      function Item() {
        return Item.__super__.constructor.apply(this, arguments);
      }

      Item.prototype.defaults = {
        title: 'Success',
        message: 'You successfully added a message box'
      };

      return Item;

    })(Backbone.Model);
    List = (function(_super) {

      __extends(List, _super);

      function List() {
        return List.__super__.constructor.apply(this, arguments);
      }

      List.prototype.model = Item;

      return List;

    })(Backbone.Collection);
    ListView = (function(_super) {

      __extends(ListView, _super);

      function ListView() {
        return ListView.__super__.constructor.apply(this, arguments);
      }

      ListView.prototype.el = $('body');

      ListView.prototype.initialize = function() {
        _.bindAll(this);
        this.collection = new List;
        this.collection.bind('add', this.appendItem);
        this.counter = 0;
        return this.render();
      };

      ListView.prototype.render = function() {
        var $container;
        $container = $("<div class='container'></div>");
        $container.append("<div class='well'><button class='btn'>AddMessage</button></div>");
        return $(this.el).append($container);
      };

      ListView.prototype.addItem = function() {
        var item;
        this.counter++;
        item = new Item;
        item.set({
          part2: "" + (item.get('part2')) + " " + this.counter
        });
        return this.collection.add(item);
      };

      ListView.prototype.appendItem = function(item) {
        return $('div.container').append("<div class='alert alert-success'><h4>" + (item.get('title')) + "</h4><p>" + (item.get('message')) + "</p></div>");
      };

      ListView.prototype.events = {
        'click button': 'addItem'
      };

      return ListView;

    })(Backbone.View);
    PackageView = (function(_super) {

      __extends(PackageView, _super);

      function PackageView() {
        return PackageView.__super__.constructor.apply(this, arguments);
      }

      PackageView.prototype.id = null;

      PackageView.prototype.el = $('body');

      PackageView.prototype.template = false;

      PackageView.prototype.options = {};

      PackageView.prototype.parentView = null;

      PackageView.prototype.html = null;

      PackageView.prototype.initialize = function(options) {
        _.bindAll(this);
        this.parentView = options.parentView;
        this.el = options.el;
        return this.render();
      };

      PackageView.prototype.render = function() {
        if (this.template) {
          this.html = $(_.template(this.template, this.options));
          $(this.el).append(this.html);
          return this.el = this.html;
        }
      };

      PackageView.prototype.end = function() {
        return this.parentView;
      };

      PackageView.prototype.addClass = function(name) {
        $(this.el).addClass(name);
        return this;
      };

      PackageView.prototype.alert = function(title, message, style) {
        var options;
        options = {
          parentView: this,
          el: this.el,
          title: title,
          message: message,
          style: style
        };
        new AlertView(options);
        return this;
      };

      PackageView.prototype.div = function(className) {
        var options, result;
        options = {
          parentView: this,
          el: this.el
        };
        result = new DivView(options);
        if (className) {
          result.addClass(className);
        }
        return result;
      };

      PackageView.prototype.container = function() {
        return this.div("container");
      };

      PackageView.prototype.row = function() {
        return this.div("row");
      };

      PackageView.prototype.span = function(span) {
        return this.div("span" + span);
      };

      return PackageView;

    })(Backbone.View);
    RootView = (function(_super) {

      __extends(RootView, _super);

      function RootView() {
        return RootView.__super__.constructor.apply(this, arguments);
      }

      RootView.prototype.initialize = function() {
        return _.bindAll(this);
      };

      return RootView;

    })(PackageView);
    DivView = (function(_super) {

      __extends(DivView, _super);

      function DivView() {
        return DivView.__super__.constructor.apply(this, arguments);
      }

      DivView.prototype.options = {};

      DivView.prototype.template = '<div></div>';

      return DivView;

    })(PackageView);
    ContainerView = (function(_super) {

      __extends(ContainerView, _super);

      function ContainerView() {
        return ContainerView.__super__.constructor.apply(this, arguments);
      }

      ContainerView.prototype.template = 'container';

      ContainerView.prototype.options = {};

      return ContainerView;

    })(PackageView);
    RowView = (function(_super) {

      __extends(RowView, _super);

      function RowView() {
        return RowView.__super__.constructor.apply(this, arguments);
      }

      RowView.prototype.template = 'row';

      RowView.prototype.options = {};

      return RowView;

    })(PackageView);
    SpanView = (function(_super) {

      __extends(SpanView, _super);

      function SpanView() {
        return SpanView.__super__.constructor.apply(this, arguments);
      }

      SpanView.prototype.template = 'span';

      SpanView.prototype.options = {};

      return SpanView;

    })(PackageView);
    AlertView = (function(_super) {

      __extends(AlertView, _super);

      function AlertView() {
        return AlertView.__super__.constructor.apply(this, arguments);
      }

      AlertView.prototype.template = 'alert';

      AlertView.prototype.options = {
        title: 'Title',
        message: 'Alert message',
        style: ''
      };

      AlertView.prototype.template = '<div class="alert<% if(style) { %> alert-<%= style %><% } %>">' + '<h4><%= title %></h4>' + '<p><%= message %></p>' + '</div>';

      return AlertView;

    })(PackageView);
    return $.fn.extend({
      bootria: function(options) {
        var settings;
        settings = {
          id: null,
          virtual: false
        };
        settings = $.extend(settings, options);
        settings.el = this[0];
        return new RootView(settings);
      }
    });
  });

}).call(this);
